package com.kevin.mellow.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_MANAGE_ENTITY".
*/
public class CityManageEntityDao extends AbstractDao<CityManageEntity, Long> {

    public static final String TABLENAME = "CITY_MANAGE_ENTITY";

    /**
     * Properties of entity CityManageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityName = new Property(1, String.class, "cityName", false, "CITY_NAME");
        public final static Property Weather = new Property(2, String.class, "weather", false, "WEATHER");
        public final static Property Temperature = new Property(3, String.class, "temperature", false, "TEMPERATURE");
        public final static Property WeatherIcon = new Property(4, String.class, "weatherIcon", false, "WEATHER_ICON");
    }


    public CityManageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CityManageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_MANAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CITY_NAME\" TEXT," + // 1: cityName
                "\"WEATHER\" TEXT," + // 2: weather
                "\"TEMPERATURE\" TEXT," + // 3: temperature
                "\"WEATHER_ICON\" TEXT);"); // 4: weatherIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_MANAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityManageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(2, cityName);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(3, weather);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(4, temperature);
        }
 
        String weatherIcon = entity.getWeatherIcon();
        if (weatherIcon != null) {
            stmt.bindString(5, weatherIcon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityManageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(2, cityName);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(3, weather);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(4, temperature);
        }
 
        String weatherIcon = entity.getWeatherIcon();
        if (weatherIcon != null) {
            stmt.bindString(5, weatherIcon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CityManageEntity readEntity(Cursor cursor, int offset) {
        CityManageEntity entity = new CityManageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weather
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // temperature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // weatherIcon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityManageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeather(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemperature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeatherIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CityManageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CityManageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityManageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
